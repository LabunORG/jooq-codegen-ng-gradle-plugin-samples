import org.labun.jooq.generator.generation.GeneratorsNames

buildscript {
    repositories {
        maven { url uri('../local-repo') }
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
        classpath 'org.labun.jooq:code-generator-gradle-plugin:2.0-SNAPSHOT'
        classpath 'com.h2database:h2:1.4.196'
    }
}

apply plugin: 'java'
apply plugin: 'org.labun.jooq.codegenerator'

jooqCodeGeneration {
    database = {
        username = 'user'
        password = 'pass'
        driverClass = 'org.h2.Driver'
        dbMetaClass = 'org.jooq.util.h2.H2Database'
        jdbcUrl = 'jdbc:h2:mem:test;INIT=RUNSCRIPT FROM \'init.sql\';'
        schemas = ['PUBLIC']
    }

    generators = [
            { generatorName = GeneratorsNames.CATALOG },
            { generatorName = GeneratorsNames.SCHEMA },
            { generatorName = GeneratorsNames.SCHEMA_INDEXES },
            { generatorName = GeneratorsNames.SCHEMA_SEQUENCES },
            { generatorName = GeneratorsNames.SCHEMA_KEYS },
            { generatorName = GeneratorsNames.TABLE },
            { generatorName = GeneratorsNames.TABLE_COLUMNS },
            { generatorName = GeneratorsNames.TABLE_RECORD },
            { generatorName = GeneratorsNames.REPOSITORY },
            {
                generatorName = 'CustomGenerator'
                subGenerator = 'org.labun.jooq.generator.task.TableSubGenerator'
                packageName = 'org.labun.jooq.generator.custom'
                className = nameConfig {
                    postfix = 'Table'
                }
                template = 'templates/java/table.vm'
                javaTimeDates = true
            }
    ]
}
